import { getConnection, releaseConnection } from "../../config/db/index.js";
import crypto from "crypto"; // ‚úÖ Th√™m import cho crypto
import axios from "axios"; // ‚úÖ Th√™m import cho axios

// POST: /api/v1/data/create-order
const handleCreateOrder = async (req, res) => {
    const {
        userId,
        receiverName,
        phoneNumber,
        email,
        provinceName,
        districtName,
        wardName,
        detailAddress,
        total,
        countItems,
        paymentMethod,
        cartItems,
    } = req.body;

    if (!cartItems || cartItems.length === 0) {
        return res
            .status(400)
            .json({ success: false, message: "Gi·ªè h√†ng tr·ªëng!" });
    }

    let connection;
    try {
        connection = await getConnection();
        await connection.beginTransaction();

        // 1Ô∏è‚É£ Th√™m ƒë∆°n h√†ng v√†o b·∫£ng orders
        const [orderResult] = await connection.execute(
            `INSERT INTO orders (userId, receiver_name, phone_number, email, province, district, ward, address, total_price, payment_method, countItems, order_status) 
             VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
            [
                userId,
                receiverName,
                phoneNumber,
                email,
                provinceName,
                districtName,
                wardName,
                detailAddress,
                total,
                paymentMethod,
                countItems,
                "pending",
            ]
        );

        const orderId = orderResult.insertId; // L·∫•y ID c·ªßa ƒë∆°n h√†ng v·ª´a t·∫°o

        // 2Ô∏è‚É£ Th√™m t·ª´ng s·∫£n ph·∫©m v√†o order_details
        const orderDetailsQuery = `INSERT INTO order_details (orderId, productId, product_name, price, quantity, subtotal) VALUES ?`;
        const orderDetailsData = cartItems.map((item) => [
            orderId,
            item.productId,
            item.name,
            item.priceNew,
            item.quantity,
            item.priceNew * item.quantity,
        ]);

        await connection.query(orderDetailsQuery, [orderDetailsData]);

        // 3Ô∏è‚É£ X√≥a gi·ªè h√†ng sau khi ƒë·∫∑t h√†ng th√†nh c√¥ng
        await connection.execute(`DELETE FROM cart WHERE userId = ?`, [userId]);

        await connection.commit();
        res.json({ success: true, message: "ƒê·∫∑t h√†ng th√†nh c√¥ng!", orderId });
    } catch (error) {
        if (connection) {
            await connection.rollback(); // üî¥ Rollback n·∫øu c√≥ l·ªói
        }
        console.error("L·ªói khi ƒë·∫∑t h√†ng:", error);
        res.status(500).json({
            success: false,
            message: "L·ªói khi ƒë·∫∑t h√†ng",
            error: error.message,
        });
    } finally {
        releaseConnection(connection); // ‚úÖ Gi·∫£i ph√≥ng k·∫øt n·ªëi
    }
};

// GET: /api/v1/data/buy-success/:id
const handleBuySuccess = async (req, res) => {
    const orderId = req.params.id; // ‚úÖ L·∫•y orderId t·ª´ URL ch√≠nh x√°c

    if (!orderId) {
        return res
            .status(400)
            .json({ success: false, message: "Thi·∫øu orderId!" });
    }

    let connection;
    try {
        connection = await getConnection();

        // 1Ô∏è‚É£ Truy v·∫•n l·∫•y th√¥ng tin ƒë∆°n h√†ng
        const [orderResult] = await connection.execute(
            `SELECT * FROM orders WHERE orderId = ?`,
            [orderId]
        );

        if (orderResult.length === 0) {
            return res
                .status(404)
                .json({ success: false, message: "Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng!" });
        }

        const order = orderResult[0]; // L·∫•y th√¥ng tin ƒë∆°n h√†ng

        // 2Ô∏è‚É£ Truy v·∫•n l·∫•y danh s√°ch s·∫£n ph·∫©m trong ƒë∆°n h√†ng + ·∫£nh t·ª´ b·∫£ng products
        const [orderDetails] = await connection.execute(
            `SELECT od.productId, od.product_name, od.price, od.quantity, od.subtotal, 
                    p.imageUrl AS product_image  -- ‚úÖ L·∫•y ·∫£nh t·ª´ b·∫£ng products
             FROM order_details od
             JOIN products p ON od.productId = p.productId  -- ‚úÖ K·∫øt h·ª£p v·ªõi b·∫£ng products
             WHERE od.orderId = ?`,
            [orderId]
        );

        // 3Ô∏è‚É£ Tr·∫£ v·ªÅ d·ªØ li·ªáu ƒë∆°n h√†ng v√† s·∫£n ph·∫©m
        res.json({
            success: true,
            order: {
                ...order,
                cartItems: orderDetails, // ‚úÖ Danh s√°ch s·∫£n ph·∫©m c√≥ th√™m ·∫£nh
            },
        });
    } catch (error) {
        console.error("L·ªói khi l·∫•y ƒë∆°n h√†ng:", error);
        res.status(500).json({
            success: false,
            message: "L·ªói khi l·∫•y ƒë∆°n h√†ng",
            error: error.message,
        });
    } finally {
        releaseConnection(connection); // ‚úÖ Gi·∫£i ph√≥ng k·∫øt n·ªëi
    }
};

// GET: /api/v1/data/order
const handleGetOrder = async (req, res) => {
    let connection;
    try {
        connection = await getConnection();

        // 1Ô∏è‚É£ Truy v·∫•n l·∫•y danh s√°ch ƒë∆°n h√†ng
        const [orderResults] = await connection.execute(`SELECT 
                o.*, 
                GROUP_CONCAT(od.product_name SEPARATOR ', ') AS product_names
            FROM orders o
            LEFT JOIN order_details od ON o.orderId = od.orderId
            GROUP BY o.orderId
            ORDER BY o.created_at DESC`);

        // 2Ô∏è‚É£ Tr·∫£ v·ªÅ d·ªØ li·ªáu ƒë∆°n h√†ng
        res.json({ success: true, orders: orderResults });
    } catch (error) {
        console.error("L·ªói khi l·∫•y danh s√°ch ƒë∆°n h√†ng:", error);
        res.status(500).json({
            success: false,
            message: "L·ªói khi l·∫•y danh s√°ch ƒë∆°n h√†ng",
            error: error.message,
        });
    } finally {
        releaseConnection(connection); // ‚úÖ Gi·∫£i ph√≥ng k·∫øt n·ªëi
    }
};

// PUT: /api/v1/data/update-status/:id
const handleUpdateStatus = async (req, res) => {
    const orderId = req.params.id;
    const { status } = req.body;

    if (
        ![
            "pending",
            "confirmed",
            "completed",
            "cancelled",
            "shiping",
            "shiped",
        ].includes(status)
    ) {
        return res.status(400).json({ message: "Tr·∫°ng th√°i kh√¥ng h·ª£p l·ªá" });
    }

    let connection;
    try {
        connection = await getConnection();

        // 1Ô∏è‚É£ C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng
        const [result] = await connection.execute(
            `UPDATE orders SET order_status = ? WHERE orderId = ?`,
            [status, orderId]
        );

        if (result.affectedRows > 0) {
            return res.json({
                success: true,
                message: "C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng th√†nh c√¥ng!",
            });
        } else {
            return res
                .status(404)
                .json({ success: false, message: "Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng!" });
        }
    } catch (error) {
        console.error("L·ªói khi c·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng:", error);
        res.status(500).json({
            success: false,
            message: "L·ªói khi c·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng",
            error: error.message,
        });
    } finally {
        releaseConnection(connection);
    }
};

// DELETE: /api/v1/data/delete-order/:id
const handleDeleteOrder = async (req, res) => {
    const orderId = req.params.id;

    if (!orderId) {
        return res.status(400).json({ message: "Thi·∫øu orderId!" });
    }

    let connection;
    try {
        connection = await getConnection();

        // 1Ô∏è‚É£ X√≥a ƒë∆°n h√†ng
        const [result] = await connection.execute(
            `DELETE FROM orders WHERE orderId = ?`,
            [orderId]
        );

        if (result.affectedRows > 0) {
            return res.json({
                success: true,
                message: "X√≥a ƒë∆°n h√†ng th√†nh c√¥ng!",
            });
        } else {
            return res
                .status(404)
                .json({ success: false, message: "Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng!" });
        }
    } catch (error) {
        console.error("L·ªói khi x√≥a ƒë∆°n h√†ng:", error);
        res.status(500).json({
            success: false,
            message: "L·ªói khi x√≥a ƒë∆°n h√†ng",
            error: error.message,
        });
    } finally {
        releaseConnection(connection);
    }
};

// GET: /api/v1/data/order/:id
const handleGetOrderByUser = async (req, res) => {
    const userId = req.params.id; // ‚úÖ L·∫•y userId t·ª´ URL

    if (!userId) {
        return res
            .status(400)
            .json({ success: false, message: "Thi·∫øu userId!" });
    }

    let connection;
    try {
        connection = await getConnection();

        // 1Ô∏è‚É£ Truy v·∫•n danh s√°ch ƒë∆°n h√†ng c·ªßa user
        const [orders] = await connection.execute(
            `SELECT * FROM orders WHERE userId = ? ORDER BY created_at DESC`,
            [userId]
        );

        if (orders.length === 0) {
            return res.json({
                success: true,
                message: "Ng∆∞·ªùi d√πng ch∆∞a c√≥ ƒë∆°n h√†ng n√†o.",
                orders: [],
            });
        }

        // 2Ô∏è‚É£ Truy v·∫•n chi ti·∫øt s·∫£n ph·∫©m c·ªßa t·ª´ng ƒë∆°n h√†ng
        const ordersWithDetails = await Promise.all(
            orders.map(async (order) => {
                const [orderDetails] = await connection.execute(
                    `SELECT od.productId, od.product_name, od.price, od.quantity, od.subtotal, 
                            p.imageUrl AS product_image, p.highlightType
                     FROM order_details od
                     JOIN products p ON od.productId = p.productId  
                     WHERE od.orderId = ?`,
                    [order.orderId]
                );

                return {
                    ...order,
                    cartItems: orderDetails, // ‚úÖ Danh s√°ch s·∫£n ph·∫©m c√≥ th√™m ·∫£nh
                };
            })
        );

        // 3Ô∏è‚É£ Tr·∫£ v·ªÅ danh s√°ch ƒë∆°n h√†ng k√®m s·∫£n ph·∫©m
        res.json({
            success: true,
            orders: ordersWithDetails,
        });
    } catch (error) {
        console.error("L·ªói khi l·∫•y danh s√°ch ƒë∆°n h√†ng:", error);
        res.status(500).json({
            success: false,
            message: "L·ªói khi l·∫•y danh s√°ch ƒë∆°n h√†ng",
            error: error.message,
        });
    } finally {
        releaseConnection(connection); // ‚úÖ Gi·∫£i ph√≥ng k·∫øt n·ªëi
    }
};

// POST: /api/v1/data/create-payment
const handleCreatePayment = async (req, res) => {
    try {
        console.log("D·ªØ li·ªáu nh·∫≠n t·ª´ frontend:", req.body); // Debug

        const { orderId, amount } = req.body;
        if (!orderId || !amount) {
            return res.status(400).json({ error: "Thi·∫øu orderId ho·∫∑c amount" });
        }

        const partnerCode = "MOMO";
        const accessKey = "F8BBA842ECF85";
        const secretKey = "K951B6PE1waDMi640xX08PD3vg6EkVlz";
        const requestId = partnerCode + new Date().getTime();
        const momoOrderId = `ORDER_${orderId}_${Date.now()}`; // ‚úÖ T·∫°o orderId duy nh·∫•t
        const orderInfo = "Thanh to√°n ƒë∆°n h√†ng";
        const redirectUrl =
            "http://localhost:8080/me/cart/buy-success/" + orderId; // ƒê∆∞·ªùng d·∫´n sau khi thanh to√°n th√†nh c√¥ng
        const ipnUrl = "https://your-backend.com/api/v1/payment/momo-ipn"; // Webhook nh·∫≠n ph·∫£n h·ªìi t·ª´ MoMo
        const requestType = "captureWallet";
        const extraData = "";

        // üîê T·∫°o ch·ªØ k√Ω
        const rawSignature = `accessKey=${accessKey}&amount=${amount}&extraData=${extraData}&ipnUrl=${ipnUrl}&orderId=${momoOrderId}&orderInfo=${orderInfo}&partnerCode=${partnerCode}&redirectUrl=${redirectUrl}&requestId=${requestId}&requestType=${requestType}`;
        const signature = crypto
            .createHmac("sha256", secretKey)
            .update(rawSignature)
            .digest("hex");

        // üì° G·ª≠i request t·ªõi MoMo
        const requestBody = {
            partnerCode,
            accessKey,
            requestId,
            amount,
            orderId: momoOrderId, // ‚úÖ S·ª≠ d·ª•ng orderId duy nh·∫•t
            orderInfo,
            redirectUrl,
            ipnUrl,
            extraData,
            requestType,
            signature,
            lang: "vi",
        };

        const response = await axios.post(
            "https://test-payment.momo.vn/v2/gateway/api/create",
            requestBody,
            { headers: { "Content-Type": "application/json" } }
        );

        console.log("K·∫øt qu·∫£ t·ª´ MoMo:", response.data); // Debug

        res.json(response.data);
    } catch (error) {
        console.error(
            "L·ªói MoMo:",
            error.response ? error.response.data : error
        );
        res.status(500).json({ error: error.message });
    }
};

// POST: /api/v1/payment/momo-ipn
const handleMoMoIPN = async (req, res) => {
    try {
        console.log("üì¢ Nh·∫≠n d·ªØ li·ªáu t·ª´ MoMo IPN:", req.body);

        const {
            orderId, // ƒê√¢y l√† `momoOrderId` (ORDER_{orderId}_{timestamp})
            requestId,
            amount,
            resultCode,
            message,
        } = req.body;

        if (!orderId || !resultCode) {
            return res.status(400).json({ error: "D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá" });
        }

        const connection = await getConnection();

        // ‚úÖ N·∫øu giao d·ªãch th√†nh c√¥ng (resultCode === 0)
        if (resultCode === 0) {
            // Tr√≠ch xu·∫•t orderId g·ªëc t·ª´ momoOrderId (ORDER_{orderId}_{timestamp})
            const originalOrderId = orderId.split("_")[1];

            // C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng
            await connection.execute(
                `UPDATE orders SET payment_status = ? WHERE orderId = ?`,
                ["paid", originalOrderId]
            );

            console.log(
                `‚úÖ ƒê√£ c·∫≠p nh·∫≠t tr·∫°ng th√°i thanh to√°n cho ƒë∆°n h√†ng ${originalOrderId}`
            );
        } else {
            console.log(`‚ùå Thanh to√°n th·∫•t b·∫°i: ${message}`);
        }

        releaseConnection(connection);
        res.json({ success: true });
    } catch (error) {
        console.error("L·ªói x·ª≠ l√Ω IPN MoMo:", error);
        res.status(500).json({ error: error.message });
    }
};

export {
    handleCreateOrder,
    handleBuySuccess,
    handleGetOrder,
    handleUpdateStatus,
    handleDeleteOrder,
    handleGetOrderByUser,
    handleCreatePayment,
    handleMoMoIPN,
};
