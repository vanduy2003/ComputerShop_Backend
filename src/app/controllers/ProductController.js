import { getConnection, releaseConnection } from "../../config/db/index.js";

// GET /api/v1/data/products
const handleGetProduct = async (req, res) => {
    let connection;
    try {
        connection = await getConnection();
        const query = `SELECT 
        p.*, 
        c.name AS categoryName, 
        c.description AS categoryDescription, 
        c.imageUrl AS categoryImage,
        s.name AS supplierName
        FROM products p
        LEFT JOIN categories c ON p.categoryId = c.categoryId
        LEFT JOIN suppliers s ON p.supplierId = s.supplierId`; // L·∫•y t·∫•t c·∫£ s·∫£n ph·∫©m
        const [rows] = await connection.execute(query);
        res.json(rows);
    } catch (error) {
        console.error("L·ªói khi l·∫•y s·∫£n ph·∫©m:", error);
        res.status(500).json({ message: "L·ªói server" });
    } finally {
        releaseConnection(connection);
    }
};

// GET /api/v1/data/products/:id
const handleGetProductById = async (req, res) => {
    let connection;
    try {
        const productId = req.params.id;
        connection = await getConnection();
        const query = `SELECT
    p.*,
    c.name AS categoryName,
    b.name AS brandName,
    b.logoUrl AS brandImg,

    -- Chuy·ªÉn danh s√°ch ·∫£nh th√†nh chu·ªói JSON h·ª£p l·ªá (kh√¥ng √©p ki·ªÉu JSON)
    CONCAT('[', GROUP_CONCAT(DISTINCT CONCAT('"', i.imageUrl, '"') SEPARATOR ','), ']') AS imageDetail,

    -- Chuy·ªÉn danh s√°ch components th√†nh chu·ªói JSON h·ª£p l·ªá
    CONCAT('[', GROUP_CONCAT(DISTINCT 
        CONCAT(
            '{"componentId": "', comp.componentId, 
            '", "name": "', comp.name, 
            '", "componentType": "', comp.componentType, 
            '", "specifications": "', comp.specifications, 
            '", "quantity": "', pc.quantity, '"}'
        ) 
    SEPARATOR ','), ']') AS components

    FROM products p
    LEFT JOIN brands b ON p.brandId = b.brandId
    LEFT JOIN imagedetail i ON p.productId = i.productId
    LEFT JOIN categories c ON p.categoryId = c.categoryId
    LEFT JOIN productcomponents pc ON p.productId = pc.productId
    LEFT JOIN components comp ON pc.componentId = comp.componentId
    WHERE p.productId = ${productId}
    GROUP BY p.productId
    LIMIT 25;`;
        const [rows] = await connection.execute(query);
        res.json(rows);
    } catch (error) {
        console.error("L·ªói khi l·∫•y s·∫£n ph·∫©m:", error);
        res.status(500).json({ message: "L·ªói server" });
    } finally {
        releaseConnection(connection);
    }
};

// POST /api/v1/data/cart
const handleAddToCart = async (req, res) => {
    let connection;
    try {
        const { userId, productId, quantity } = req.body;
        if (!userId || !productId || !quantity) {
            return res
                .status(400)
                .json({ message: "Thi·∫øu th√¥ng tin gi·ªè h√†ng" });
        }

        connection = await getConnection();

        // Ki·ªÉm tra s·∫£n ph·∫©m ƒë√£ c√≥ trong gi·ªè h√†ng ch∆∞a
        const [existingCart] = await connection.execute(
            "SELECT * FROM cart WHERE userId = ? AND productId = ?",
            [userId, productId]
        );

        if (existingCart.length > 0) {
            // N·∫øu s·∫£n ph·∫©m ƒë√£ c√≥, c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng
            await connection.execute(
                "UPDATE cart SET quantity = quantity + ? WHERE userId = ? AND productId = ?",
                [quantity, userId, productId]
            );
        } else {
            // N·∫øu ch∆∞a c√≥, th√™m m·ªõi
            await connection.execute(
                "INSERT INTO cart (userId, productId, quantity) VALUES (?, ?, ?)",
                [userId, productId, quantity]
            );
        }

        return res.json({ message: "Th√™m v√†o gi·ªè h√†ng th√†nh c√¥ng" });
    } catch (error) {
        console.error("L·ªói khi th√™m v√†o gi·ªè h√†ng:", error);
        return res.status(500).json({ message: "L·ªói server" });
    } finally {
        releaseConnection(connection);
    }
};

// GET /api/v1/data/get-cart/:id
const handleGetCart = async (req, res) => {
    let connection;
    try {
        const { id: userId } = req.params; // L·∫•y userId t·ª´ params

        if (!userId) {
            return res.status(400).json({ message: "Thi·∫øu userId" });
        }

        connection = await getConnection();
        const [cartItems] = await connection.execute(
            `SELECT 
    c.cartId, 
    c.productId, 
    c.quantity, 
    p.name, 
    p.priceOld,
    p.priceNew,
    p.imageUrl,
    
    -- Chuy·ªÉn danh s√°ch components th√†nh chu·ªói JSON h·ª£p l·ªá
    CONCAT('[', GROUP_CONCAT(DISTINCT 
        CONCAT(
            '{"componentId": "', comp.componentId, 
            '", "component_name": "', comp.name, 
            '", "componentType": "', comp.componentType, 
            '", "specifications": "', comp.specifications, 
            '", "quantity": "', pc.quantity, '"}'
        ) 
    SEPARATOR ','), ']') AS components

FROM cart c
JOIN products p ON c.productId = p.productId
LEFT JOIN productcomponents pc ON p.productId = pc.productId
LEFT JOIN components comp ON pc.componentId = comp.componentId

WHERE c.userId = ?
GROUP BY c.cartId;
`,
            [userId]
        );

        return res.json(cartItems);
    } catch (error) {
        console.error("L·ªói l·∫•y gi·ªè h√†ng:", error);
        return res.status(500).json({ message: "L·ªói server" });
    } finally {
        releaseConnection(connection);
    }
};

// DELETE /api/v1/data/delete-cart/:id
const handleDeleteCart = async (req, res) => {
    let connection;
    try {
        const { id: cartId } = req.params; // L·∫•y cartId t·ª´ params

        if (!cartId) {
            return res.status(400).json({ message: "Thi·∫øu cartId" });
        }

        connection = await getConnection();
        await connection.execute("DELETE FROM cart WHERE cartId = ?", [cartId]);

        return res.json({ success: true, message: "X√≥a s·∫£n ph·∫©m th√†nh c√¥ng!" });
    } catch (error) {
        console.error("L·ªói x√≥a gi·ªè h√†ng:", error);
        return res
            .status(500)
            .json({ success: false, message: "L·ªói server", error });
    } finally {
        releaseConnection(connection);
    }
};

// PUT /api/v1/data/update-cart
const handleUpdateCart = async (req, res) => {
    let connection;
    try {
        const { cartId, quantity } = req.body;

        if (!cartId || quantity === undefined) {
            return res
                .status(400)
                .json({ message: "Thi·∫øu th√¥ng tin c·∫≠p nh·∫≠t" });
        }

        connection = await getConnection();

        if (quantity > 0) {
            // N·∫øu s·ªë l∆∞·ª£ng h·ª£p l·ªá, c·∫≠p nh·∫≠t gi·ªè h√†ng
            await connection.execute(
                "UPDATE cart SET quantity = ? WHERE cartId = ?",
                [quantity, cartId]
            );
            return res.json({
                success: true,
                message: "C·∫≠p nh·∫≠t gi·ªè h√†ng th√†nh c√¥ng",
            });
        } else {
            // N·∫øu s·ªë l∆∞·ª£ng <= 0, x√≥a s·∫£n ph·∫©m kh·ªèi gi·ªè h√†ng
            await connection.execute("DELETE FROM cart WHERE cartId = ?", [
                cartId,
            ]);
            return res.json({
                success: true,
                message: "ƒê√£ x√≥a s·∫£n ph·∫©m kh·ªèi gi·ªè h√†ng",
            });
        }
    } catch (error) {
        console.error("L·ªói khi c·∫≠p nh·∫≠t gi·ªè h√†ng:", error);
        return res.status(500).json({ message: "L·ªói server" });
    } finally {
        releaseConnection(connection);
    }
};

// POST /api/v1/data/product-add
const handleProductAdd = async (req, res) => {
    let connection;
    try {
        const {
            name,
            priceOld,
            priceNew,
            imageUrl,
            sale,
            stockQuantity,
            categoryId,
            supplierId,
            brandId,
            highlightType,
            descHTML,
            components,
            imageDetails, // üÜï Th√™m danh s√°ch ·∫£nh chi ti·∫øt
        } = req.body;

        if (
            !name ||
            !priceOld ||
            !priceNew ||
            !imageUrl ||
            !sale ||
            !stockQuantity ||
            !categoryId ||
            !supplierId ||
            !brandId ||
            !highlightType ||
            !descHTML
        ) {
            return res
                .status(400)
                .json({ message: "Thi·∫øu th√¥ng tin s·∫£n ph·∫©m" });
        }

        connection = await getConnection();

        // üü¢ Th√™m s·∫£n ph·∫©m v√†o b·∫£ng products
        const [result] = await connection.execute(
            "INSERT INTO products (name, priceOld, priceNew, imageUrl, sale, stockQuantity, categoryId, supplierId, brandId, highlightType, descHTML) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)",
            [
                name,
                priceOld,
                priceNew,
                imageUrl,
                sale,
                stockQuantity,
                categoryId,
                supplierId,
                brandId,
                highlightType,
                descHTML,
            ]
        );
        const productId = result.insertId; // üÜï L·∫•y ID s·∫£n ph·∫©m v·ª´a th√™m

        // üü¢ Th√™m c√°c linh ki·ªán v√†o b·∫£ng productcomponents n·∫øu c√≥
        if (components && components.length > 0) {
            const componentValues = components.map((c) => [
                productId,
                c.componentId,
                c.quantity,
            ]);
            await connection.query(
                "INSERT INTO productcomponents (productId, componentId, quantity) VALUES ?",
                [componentValues]
            );
        }

        // üü¢ Th√™m danh s√°ch ·∫£nh chi ti·∫øt v√†o b·∫£ng imagedetail n·∫øu c√≥
        if (imageDetails && imageDetails.length > 0) {
            const imageValues = imageDetails.map((img) => [
                productId,
                img.imageUrl,
            ]);
            await connection.query(
                "INSERT INTO imagedetail (productId, imageUrl) VALUES ?",
                [imageValues]
            );
        }

        res.status(201).json({
            message: "Th√™m s·∫£n ph·∫©m th√†nh c√¥ng",
            productId,
        });
    } catch (error) {
        console.error("L·ªói khi th√™m s·∫£n ph·∫©m:", error);
        return res.status(500).json({ message: "L·ªói server" });
    } finally {
        if (connection) releaseConnection(connection);
    }
};

// DELETE /api/v1/data/product-delete/:id
const handleProductDelete = async (req, res) => {
    let connection;
    try {
        const productId = req.params.id;

        if (!productId) {
            return res.status(400).json({ message: "Thi·∫øu ID s·∫£n ph·∫©m" });
        }

        connection = await getConnection();

        // X√≥a c√°c linh ki·ªán li√™n quan trong b·∫£ng productcomponents
        await connection.execute(
            "DELETE FROM productcomponents WHERE productId = ?",
            [productId]
        );

        // X√≥a s·∫£n ph·∫©m trong b·∫£ng products
        const [result] = await connection.execute(
            "DELETE FROM products WHERE productId = ?",
            [productId]
        );

        if (result.affectedRows === 0) {
            return res.status(404).json({ message: "S·∫£n ph·∫©m kh√¥ng t·ªìn t·∫°i" });
        }

        res.status(200).json({ message: "X√≥a s·∫£n ph·∫©m th√†nh c√¥ng" });
    } catch (error) {
        console.error("L·ªói khi x√≥a s·∫£n ph·∫©m:", error);
        return res.status(500).json({ message: "L·ªói server" });
    } finally {
        if (connection) releaseConnection(connection);
    }
};

// PUT /api/v1/data/product-update
const handleProductUpdate = async (req, res) => {
    let connection;
    try {
        const {
            productId,
            name,
            priceOld,
            priceNew,
            imageUrl,
            sale,
            stockQuantity,
            categoryId,
            supplierId,
            brandId,
            highlightType,
            descHTML,
            components,
            imageDetails, // üÜï Th√™m danh s√°ch ·∫£nh chi ti·∫øt
        } = req.body;

        if (
            !productId ||
            !name ||
            !priceOld ||
            !priceNew ||
            !imageUrl ||
            !sale ||
            !stockQuantity ||
            !categoryId ||
            !supplierId ||
            !brandId ||
            !highlightType ||
            !descHTML
        ) {
            return res
                .status(400)
                .json({ message: "Thi·∫øu th√¥ng tin s·∫£n ph·∫©m" });
        }

        connection = await getConnection();

        // C·∫≠p nh·∫≠t th√¥ng tin s·∫£n ph·∫©m trong b·∫£ng products
        await connection.execute(
            `UPDATE products SET 
            name = ?, 
            priceOld = ?, 
            priceNew = ?, 
            imageUrl = ?, 
            sale = ?, 
            stockQuantity = ?, 
            categoryId = ?, 
            supplierId = ?, 
            brandId = ?, 
            highlightType = ?, 
            descHTML = ?
            WHERE productId = ?`,
            [
                name,
                priceOld,
                priceNew,
                imageUrl,
                sale,
                stockQuantity,
                categoryId,
                supplierId,
                brandId,
                highlightType,
                descHTML,
                productId,
            ]
        );

        // X√≥a c√°c linh ki·ªán li√™n quan trong b·∫£ng productcomponents
        await connection.execute(
            "DELETE FROM productcomponents WHERE productId = ?",
            [productId]
        );

        // Th√™m c√°c linh ki·ªán v√†o productcomponents n·∫øu c√≥
        if (components && components.length > 0) {
            const componentValues = components.map((c) => [
                productId,
                c.componentId,
                c.quantity,
            ]);
            await connection.query(
                "INSERT INTO productcomponents (productId, componentId, quantity) VALUES ?",
                [componentValues]
            );
        }

        // üî• C·∫≠p nh·∫≠t danh s√°ch ·∫£nh chi ti·∫øt
        if (imageDetails && imageDetails.length > 0) {
            // X√≥a t·∫•t c·∫£ ·∫£nh chi ti·∫øt c≈©
            await connection.execute(
                "DELETE FROM imagedetail WHERE productId = ?",
                [productId]
            );

            // Th√™m ·∫£nh chi ti·∫øt m·ªõi
            const placeholders = imageDetails.map(() => "(?, ?)").join(", ");
            const values = imageDetails.flatMap((img) => [productId, img]);

            await connection.execute(
                `INSERT INTO imagedetail (productId, imageUrl) VALUES ${placeholders}`,
                values
            );
        }

        res.status(200).json({
            message: "C·∫≠p nh·∫≠t s·∫£n ph·∫©m th√†nh c√¥ng",
            productId,
        });
    } catch (error) {
        console.error("L·ªói khi c·∫≠p nh·∫≠t s·∫£n ph·∫©m:", error);
        return res.status(500).json({ message: "L·ªói server" });
    } finally {
        if (connection) releaseConnection(connection);
    }
};

export {
    handleGetProduct,
    handleGetProductById,
    handleAddToCart,
    handleGetCart,
    handleDeleteCart,
    handleUpdateCart,
    handleProductAdd,
    handleProductDelete,
    handleProductUpdate,
};
